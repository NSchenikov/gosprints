// ======
// Спринт 0 (короткий):

// Установить Go, настроить переменные окружения
// Научиться работать с командной строкой/терминалом
// Научиться собирать проект на Go (`go build`) или запускать с `go run main.go`
// Установить IDE

// Зарегистрировать аккаунт на GitHub/GitLab
// Установить Git локально


// Общая идея

// Создаем систему для управления задачами (Tasks), которая будет развиваться поэтапно и охватывать:

//     CRUD-операции с авторизацией через REST API,
//     Асинхронную обработку задач с использованием очередей и горутин,
//     Уведомления в реальном времени через WebSocket,
//     Расширение функционала с поиском, метриками, gRPC и ETL-пайплайном с Kafka,
//     В дальнейшем — переход к микросервисной архитектуре.

// Каждый спринт рассчитан на 1–2 недели, что в сумме дает 4–6 месяцев развития.
// Спринт 1: Базовый CRUD и авторизация

// Задача:

//     Реализовать базовый HTTP-сервис (можно взять фреймворк Gin, Fiber но для начала лучше использовать net/http) с CRUD-операциями над сущностью «Task».
//     Подключить PostgreSQL (либо другую реляционную БД).
//     Добавить простейшую авторизацию (например, через JWT):
//         Регистрация/логин пользователей.
//         Создание, чтение, редактирование, удаление задач доступно только авторизованным пользователям.


// Цели:

//     Изучить базовые подходы к созданию REST API на Go.
//     Освоить работу с БД (через GORM или чистый database/sql).
//     Понять основные принципы аутентификации/авторизации (JWT или session-based).

// Функциональные требования:

//     CRUD для задач:
//         Создание задачи: POST /tasks
//         Тело запроса: { "title": "...", "description": "...", "status": "pending" }
//         Чтение задачи: GET /tasks/{id}
//         Обновление задачи: PUT /tasks/{id}
//         Удаление задачи: DELETE /tasks/{id}
//     Пользовательская авторизация:
//         Регистрация и логин через JWT.
//         Все операции с задачами доступны только после аутентификации.
//     База данных:
//         Использование PostgreSQL.
//         Таблица tasks с индексами по полям id и user_id.
//     Техническая реализация:
//         Выбор фреймворка: можно использовать Gin или net/http.
//         Организация проекта по пакетам: например, models для структур, handlers для контроллеров, db для работы с базой данных.

// Нефункциональные требования:

//     Корректная обработка ошибок и логирование.
//     Набор базовых юнит-тестов для ключевых функций API.